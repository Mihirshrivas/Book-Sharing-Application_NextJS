generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("USER")
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?   @default("")
  avatar        String?   @default("")
  preferredGenres String[] @default([])
  isVerified    Boolean   @default(false)
  notifications Notification[]
  
  // Relations
  books         Book[]    @relation("UserBooks")
  borrowedBooks BorrowRecord[] @relation("Borrower")
  lentBooks     BorrowRecord[] @relation("Lender")
  communities   CommunityMember[]
  posts         Post[]
  comments      Comment[]
  reviews       Review[]
}

model Book {
  id          String    @id @default(cuid())
  title       String
  author      String
  description String
  genre       String[]
  condition   String
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  owner       User      @relation("UserBooks", fields: [ownerId], references: [id])
  ownerId     String
  borrowRecords BorrowRecord[]
  reviews     Review[]
}

model BorrowRecord {
  id          String    @id @default(cuid())
  startDate   DateTime
  dueDate     DateTime
  returnedDate DateTime?
  status      String    // PENDING, APPROVED, REJECTED, RETURNED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String
  borrower    User      @relation("Borrower", fields: [borrowerId], references: [id])
  borrowerId  String
  lender      User      @relation("Lender", fields: [lenderId], references: [id])
  lenderId    String
}

model Community {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  members     CommunityMember[]
  posts       Post[]
}

model CommunityMember {
  id          String    @id @default(cuid())
  role        String    // ADMIN, MODERATOR, MEMBER
  joinedAt    DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@unique([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  comments    Comment[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String

  @@unique([userId, bookId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // BORROW_REQUEST, DUE_DATE, RETURN_REMINDER, etc.
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    String?
} 